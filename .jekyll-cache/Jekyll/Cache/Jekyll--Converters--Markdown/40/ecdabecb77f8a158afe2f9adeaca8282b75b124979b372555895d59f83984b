I" <p><span class="Apple-style-span" style="font-size: small;"><span class="Apple-style-span" style="font-size: 13px;"><span class="Apple-style-span" style="font-family: inherit;"><span class="Apple-style-span" style="font-size: medium;">The case I’m talking about is Binding with the UpdateSourceTrigger = PropertyChanged, and a heavy logic behind each change that can cause bad UX, like ui freeze on each key press in a text box.</span></span></span></span><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">Here is a nice sample that demonstrate this case:</span><br /><span class="Apple-style-span" style="font-family: inherit;">I have a window with a text box and 2 buttons, the IsEnabled of the buttons is bounded to custom properties that depends on the TextBox text bounded field to decide if the button should be enabled (just like commands).</span><br /><span class="Apple-style-span" style="font-family: inherit;">This is the window</span><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/_sNh3dtF9YE4/TI_igTblm9I/AAAAAAAACLw/k-zv0aBD_fM/s1600/Rx.bmp" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span class="Apple-style-span" style="font-family: inherit;"><img border="0" src="http://4.bp.blogspot.com/_sNh3dtF9YE4/TI_igTblm9I/AAAAAAAACLw/k-zv0aBD_fM/s320/Rx.bmp" /></span></a>&lt;/div&gt;<span class="Apple-style-span" style="font-family: inherit;">This is the window xaml</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br />&lt;pre class="brush: csharp;"&gt;&lt;Window x:Class=”ReactivlyPropertyChanged.MainWindow”<br />        xmlns=”http://schemas.microsoft.com/winfx/2006/xaml/presentation”<br />        xmlns:x=”http://schemas.microsoft.com/winfx/2006/xaml”<br />        Title=”MainWindow” Height=”350” Width=”525” x:Name=”this”&gt;<br />    &lt;Grid&gt;<br />        &lt;StackPanel&gt;<br />            &lt;TextBox Text=”{Binding SomeText, ElementName=this, UpdateSourceTrigger=PropertyChanged}”/&gt;<br />            &lt;Button IsEnabled=”{Binding ElementName=this, Path=CanSplitInMiddle}”&gt;2&lt;/Button&gt;<br />            &lt;Button IsEnabled=”{Binding ElementName=this, Path=CanSplitToThreeParts}”&gt;3&lt;/Button&gt;<br /><br />        &lt;/StackPanel&gt;<br />    &lt;/Grid&gt;<br />&lt;/Window&gt;&lt;/pre&gt;<span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">This is the bounded properties implementation (I added sleep to demonstrate long time consumers)</span><br />&lt;pre class="brush: csharp;"&gt;private string _someText;<br /><br />        public string SomeText<br />        {<br />            get { return _someText; }<br />            set<br />            {<br />                _someText = value;<br />                RaisePropertyChanged(“SomeText”);<br />            }<br />        }<br /><br />        public bool CanSplitInMiddle<br />        {<br />            get<br />            {<br />                if (SomeText == null)<br />                    return false;<br />                Thread.Sleep(100);<br />                return SomeText.Length % 2 == 0;<br />            }<br />        }<br /><br />        public bool CanSplitToThreeParts<br />        {<br />            get<br />            {<br />                if (SomeText == null)<br />                    return false;<br />                Thread.Sleep(100);<br />                return SomeText.Length % 3 == 0;<br />            }<br />        }<br /><br />&lt;/pre&gt;<span class="Apple-style-span" style="font-family: inherit;">As you can see there is a simple length check of the entered string, now you probably think that the application would get stuck for each key press for at least 200 ms.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">Take a look at the property changed handling:</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br />&lt;pre class="brush: csharp;"&gt;public MainWindow()<br />{<br />    // Sets the buffer time for property changed<br />    var interval = 500;<br /><br />    InitializeComponent();<br /><br />      // Create observable from the property changed event<br />    var propertyChangedObservable = <br />        Observable.FromEvent&lt;PropertyChangedEventArgs&gt;(this, “PropertyChanged”).<br />        BufferWithTime(TimeSpan.FromMilliseconds(interval));<br /><br />      // Define our query from the event, we want to get all fired propertyChanged<br />    var query = from changedProps in propertyChangedObservable<br />                where changedProps.Count &gt; 0 <br />                select changedProps;<br />                            <br />      // start listening<br />    query.Subscribe(listOfChangedStuff =&gt;<br />    {<br />// When fired group all events by property name and handle each property with Changed method<br />        var events = from distinctEvent in listOfChangedStuff<br />                                 group distinctEvent by distinctEvent.EventArgs.PropertyName into byPropertyName<br />                                 select byPropertyName;<br /><br />        foreach (IGrouping&lt;string,IEvent&lt;PropertyChangedEventArgs&gt;&gt; groupedEvent in events)<br />        {<br />            Changed(groupedEvent.Key);<br />        }<br />    });        <br />}<br /><br />public void Changed(string propertyName)<br />{<br />    if (propertyName == “SomeText”)<br />    {<br />       // Make the properties recalculate themself<br />        RaisePropertyChanged(“CanSplitInMiddle”);<br />        RaisePropertyChanged(“CanSplitToThreeParts”);<br />    }<br />}<br /><br />public void RaisePropertyChanged(string propertyName)<br />{<br />    var handlers = PropertyChanged;<br />    if (handlers != null)<br />    {<br />        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));<br />    }<br />}<br />&lt;/pre&gt;<span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">So WTF?</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">One of Rx many features is buffer,I can tell property changed event to buffer himself for some time, and when the time passed take all fired events and work with them, what I did is to group all events by the property name (like distinct in sql) and handled each group as a single event.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">So even if the user is a super turbo writer(or the bot that test the ui) , the event will fired only 2 times in a second, for 500 ms interval.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">I think this is awesome, you can configure the buffer interval according to how complex and time consuming your logic is, and avoid freezing ui.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">I wanted to upload the code to somewhere but o got to fly…</span></p>
:ET