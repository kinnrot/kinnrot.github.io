I"‡<p>Sometimes we want to show the user an alert when somethings wrong or we just need to give some extra info,
For example; Ask the user if he is sure he wanna leave the app.</p>

<p>This can be achieved with the following code (runs inside activity):</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="nc">AlertDialog</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setMessage</span><span class="p">(</span><span class="s">"Are you sure you want to exit?"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setCancelable</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setPositiveButton</span><span class="p">(</span><span class="s">"Yes"</span><span class="p">,</span> <span class="k">object</span><span class="p">:</span><span class="nc">DialogInterface</span><span class="p">.</span><span class="nc">OnClickListener</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">dialog</span><span class="p">:</span><span class="nc">DialogInterface</span><span class="p">,</span> <span class="n">id</span><span class="p">:</span><span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="nd">@YourActivity</span><span class="p">.</span><span class="nf">finish</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nf">setNegativeButton</span><span class="p">(</span><span class="s">"No"</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">show</span><span class="p">()</span>
  </code></pre></figure>

<p>This works fine, buy there is one annoying issue, If user clicks home button while dialog displayed, and go back to the app, the dialog will still be there.
Now your user experience is seeing a question about getting out of the app while he just went in.</p>

<p>To avoid this case, I found an easy solution by making my modal lifecycle aware, If yourâ€™e not sure whats lifecycle, consider read about it <a href="https://developer.android.com/topic/libraries/architecture/lifecycle">here</a>.</p>

<p>Every activity/fragment implements the LifecycleOwner interface so lets add the following method:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">private</span> <span class="k">fun</span> <span class="nf">subscribeToLifecycleEvents</span><span class="p">(</span><span class="n">dialog</span><span class="p">:</span> <span class="nc">Dialog</span><span class="p">,</span> <span class="n">lifecycleOwner</span><span class="p">:</span> <span class="nc">LifecycleOwner</span><span class="p">?,</span> <span class="n">dismissHandler</span><span class="p">:</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">val</span> <span class="py">lifecycleObserver</span> <span class="p">=</span> <span class="nc">GenericLifecycleObserver</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="nc">Lifecycle</span><span class="p">.</span><span class="nc">Event</span><span class="p">.</span><span class="nc">ON_PAUSE</span> <span class="p">&amp;&amp;</span> <span class="n">dialog</span><span class="p">.</span><span class="n">isShowing</span><span class="p">)</span> <span class="p">{</span>
           <span class="n">dialog</span><span class="p">.</span><span class="nf">dismiss</span><span class="p">()</span>
           <span class="n">dismissHandler</span><span class="o">?.</span><span class="nf">invoke</span><span class="p">()</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="n">lifecycleOwner</span><span class="o">?.</span><span class="nf">apply</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="nf">addObserver</span><span class="p">(</span><span class="n">lifecycleObserver</span><span class="p">)</span> <span class="p">}</span>
   <span class="n">dialog</span><span class="p">.</span><span class="nf">setOnDismissListener</span> <span class="p">{</span> <span class="n">lifecycleOwner</span><span class="o">?.</span><span class="nf">apply</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="nf">removeObserver</span><span class="p">(</span><span class="n">lifecycleObserver</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This method make every dialog lifecycle aware, meaning, if we add subscription to the dialog display:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">  <span class="kd">val</span> <span class="py">dialog</span> <span class="p">=</span> <span class="nc">AlertDialog</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setMessage</span><span class="p">(</span><span class="s">"Are you sure you want to exit?"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setCancelable</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setPositiveButton</span><span class="p">(</span><span class="s">"Yes"</span><span class="p">,</span> <span class="k">object</span><span class="p">:</span><span class="nc">DialogInterface</span><span class="p">.</span><span class="nc">OnClickListener</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">dialog</span><span class="p">:</span><span class="nc">DialogInterface</span><span class="p">,</span> <span class="n">id</span><span class="p">:</span><span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="nd">@YourActivity</span><span class="p">.</span><span class="nf">finish</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nf">setNegativeButton</span><span class="p">(</span><span class="s">"No"</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">show</span><span class="p">()</span>
  
  <span class="nf">subscribeToLifecycleEvents</span><span class="p">(</span><span class="n">dialog</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span> <span class="c1">// add subscription</span>
  </code></pre></figure>

<p>Every time the lifecycle owner of the modal (fragment activity or custom implementation) is paused, the 
dialog will be automatically dismissed.</p>

<p>Lifecycle architecture opens many options related to bind ui interactions with lifecycle which is extremely important for a mobile phone
that can get interrupts like phone calls and messages all the time.</p>

:ET