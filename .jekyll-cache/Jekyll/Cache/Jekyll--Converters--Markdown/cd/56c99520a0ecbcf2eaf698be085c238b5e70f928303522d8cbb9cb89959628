I"¿<p>One of the basic stuff you wanna test as a client side developer, is that all of your UI bounded classes aka Controller, Model, ViewModel, Presenter, PresentationModel, or the code behind of your view if your just having fun.<br />&lt;div&gt;<br />Let‚Äôs assume we have a person class with a name property:<br /><br />&lt;/div&gt;&lt;pre class="brush: csharp; ruler: true;"&gt;public class Person : INotifyPropertyChanged<br />{<br />    public event PropertyChangedEventHandler PropertyChanged;<br /><br />    private string _name;<br /><br />    public virtual string Name<br />    {<br />        get { return _name; }<br />        set { _name = value;<br />        FirePropertyChanged(‚ÄúName‚Äù);<br />        }<br />    }<br /><br />    protected virtual void FirePropertyChanged(string propertyName)<br />    {<br />        var handlers = PropertyChanged;<br />        if (handlers != null)<br />        {<br />            handlers(this, new PropertyChangedEventArgs(propertyName));<br />        }<br />    }<br />}<br />&lt;/pre&gt;&lt;pre class="brush: csharp; ruler: true;"&gt;&lt;/pre&gt;&lt;div&gt;The simplest way to perform this test is to write this code:<br /><br />&lt;pre class="brush: csharp; ruler: true;"&gt;[TestFixture]<br />public class PersonTest<br />{<br />    [Test]<br />    public void SetName_SomeNewString_FirePropertyChanged()<br />    {<br />        Person person = new Person();<br />        string changedPropertyName = string.Empty;<br />        person.PropertyChanged += (sender, args) =&gt; changedPropertyName = args.PropertyName;<br />        person.Name = ‚ÄúTest‚Äù;<br />        Assert.AreEqual(‚ÄúName‚Äù, changedPropertyName);<br />    }<br />}<br />&lt;/pre&gt;&lt;/div&gt;</p>
:ET