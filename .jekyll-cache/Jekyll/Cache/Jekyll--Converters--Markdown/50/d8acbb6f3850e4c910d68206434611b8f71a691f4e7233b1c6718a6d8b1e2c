I"<p><span style="font-family: Courier New, Courier, monospace;">When we want to iterate a long list, we can simply write a query and get a cursor, ActiveRecord will do all the heavy lifting for us.</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">What happens when we need to do some complicated computations on a set of data, which sometimes can be too big to be stored in memory for the entire computing process?</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">This is when we need to start being more creational.</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">I’d like to introduce what I came up with.</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">The problem:</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">- Complex calculation on time based data series for a period of 3 months.</span><br /><span style="font-family: Courier New, Courier, monospace;">- Each calculation may depends on previous one and on future and past data.</span><br /><span style="font-family: Courier New, Courier, monospace;">- Must be in order.</span><br /><span style="font-family: Courier New, Courier, monospace;">- When fetching all data server crash on memory.</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">The solution:</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">I wanted to do the most minor code change possible, and currently the data was accessed via a hash. </span><br /><span style="font-family: Courier New, Courier, monospace;">I decided to encapsulate the hash with something I called lazy chunked hash (tried google it see it as standard behavior in clojure).</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">It looks like this:</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span>&lt;pre style="background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;"&gt;<span style="color: #cc7833;">class </span><span style="color: white;">ValuesProvider</span><span style="color: white;">  </span><span style="color: #cc7833;">def </span><span style="color: #ffc66d;">initialize</span>()<br />    <span style="color: #d0d0ff;">@loaded_date </span><span style="color: #cc7833;">= nil</span>&lt;/pre&gt;&lt;pre style="background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;"&gt;&lt;pre style="font-family: mononoki; font-size: 11.3pt;"&gt;<span style="background-color: #3c3c57; color: #d0d0ff;">    @hash</span><span style="color: #d0d0ff;"> </span><span style="color: #cc7833;">= </span><span style="color: #6d9cbe;">Hash</span>.new(<span style="color: #a5c261;">0</span>)&lt;/pre&gt;<span style="color: #cc7833;">  end</span><span style="color: #cc7833;"></span><span style="color: #cc7833;">  def </span><span style="color: #ffc66d;">[]</span>(time_slot)     get(time_slot)   <span style="color: #cc7833;">end</span><span style="color: #cc7833;"></span><span style="color: #cc7833;">  private</span><span style="color: #cc7833;"></span><span style="color: #cc7833;">  def </span><span style="color: #ffc66d;">get</span>(time_slot)     <span style="color: #d0d0ff;">relevant_date </span><span style="color: #cc7833;">= </span>time_slot.to_date     <span style="color: #cc7833;">unless </span><span style="color: #d0d0ff;">relevant_date </span><span style="color: #cc7833;">== </span><span style="color: #d0d0ff;">@loaded_date</span><span style="color: #d0d0ff;">      </span>load(<span style="color: #d0d0ff;">relevant_date</span>)     <span style="color: #cc7833;">end</span><span style="color: #cc7833;"></span><span style="color: #cc7833;">    </span><span style="color: #d0d0ff;">@hash</span>[time_slot.to_i]   <span style="color: #cc7833;">end</span>&lt;/pre&gt;&lt;pre style="background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;"&gt;<span style="color: #cc7833;">end</span>&lt;/pre&gt;<br /><span style="font-family: Courier New, Courier, monospace;">Pretty simple and does the work, instead of loading the data all at once, the data is being loaded for each day separately, this way we keep it chunky but not too chunky.</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">And best part, my code that consume the data, didn’t change because of the [] method, which makes my ValueProvider behave like an array. </span><br /><br /> <span style="font-family: Courier New, Courier, monospace;">This solution is good when the consumer data request(call for[]) implies on what data should be loaded, which most of the times will, but in some cases it won’t)</span><br /><br /></p>
:ET