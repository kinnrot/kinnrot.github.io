I"^8<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"><div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div><div style="background: #ddd; max-height: 500px; overflow: auto"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"><li><span style="color:#0000ff">using</span> System;</li><li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li><li><span style="color:#0000ff">using</span> System.Linq;</li><li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li><li><span style="color:#0000ff">using</span> System.Threading;</li><li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Threading.Tasks;</li><li>&nbsp;</li><li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> WpfApplication1</li><li>{</li><li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt;</li><li>    {</li><li style="background: #f3f3f3">&nbsp;</li><li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt; New()</li><li style="background: #f3f3f3">        {</li><li>            <span style="color:#0000ff">return</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt;();</li><li style="background: #f3f3f3">        }</li><li>&nbsp;</li><li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt; StartWith(<span style="color:#2b91af">Func</span>&lt;<span style="color:#0000ff">object</span>, <span style="color:#2b91af">CancellationToken</span>, TResult&gt; work)</li><li>        {</li><li style="background: #f3f3f3">            Start = work;</li><li>            <span style="color:#0000ff">return</span> <span style="color:#0000ff">this</span>;</li><li style="background: #f3f3f3">        }</li><li>&nbsp;</li><li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt; FinishWith(<span style="color:#2b91af">Action</span>&lt;TResult,<span style="color:#0000ff">object</span>&gt; finish)</li><li>        {</li><li style="background: #f3f3f3">            Finish = finish;</li><li>            <span style="color:#0000ff">return</span> <span style="color:#0000ff">this</span>;</li><li style="background: #f3f3f3">        }</li><li>&nbsp;</li><li style="background: #f3f3f3">        <span style="color:#0000ff">private</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">CancellationTokenSource</span> _cancelationTokenSource;</li><li>        <span style="color:#0000ff">private</span> <span style="color:#2b91af">CancellationToken</span> _cancellationToken;</li><li style="background: #f3f3f3">        <span style="color:#0000ff">private</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">TaskScheduler</span> _uiScheduler;</li><li>&nbsp;</li><li style="background: #f3f3f3">&nbsp;</li><li>        <span style="color:#0000ff">public</span> TBackgroundWorker()</li><li style="background: #f3f3f3">        {</li><li>            _cancelationTokenSource = <span style="color:#0000ff">new</span> <span style="color:#2b91af">CancellationTokenSource</span>();</li><li style="background: #f3f3f3">            _uiScheduler = <span style="color:#2b91af">TaskScheduler</span>.FromCurrentSynchronizationContext();</li><li>        }</li><li style="background: #f3f3f3">&nbsp;</li><li>        <span style="color:#0000ff">protected</span> <span style="color:#2b91af">Func</span>&lt;<span style="color:#0000ff">object</span>, <span style="color:#2b91af">CancellationToken</span>,TResult&gt; Start { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li><li style="background: #f3f3f3">        <span style="color:#0000ff">protected</span> <span style="color:#2b91af">Action</span>&lt;TResult, <span style="color:#0000ff">object</span>&gt; Finish { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li><li>&nbsp;</li><li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> ReportProgress(<span style="color:#2b91af">Action</span>&lt;TProgress&gt; progressReport,TProgress progress)</li><li>        {</li><li style="background: #f3f3f3">            <span style="color:#2b91af">Task</span>.Factory.StartNew(()=&gt;progressReport(progress),<span style="color:#2b91af">CancellationToken</span>.None,<span style="color:#2b91af">TaskCreationOptions</span>.None,_uiScheduler);</li><li>        }</li><li style="background: #f3f3f3">&nbsp;</li><li>        <span style="color:#0000ff">public</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;TResult, TProgress&gt; Begin(<span style="color:#0000ff">object</span> state = <span style="color:#0000ff">null</span>)</li><li style="background: #f3f3f3">        {</li><li>            _cancellationToken = _cancelationTokenSource.Token;</li><li style="background: #f3f3f3">            <span style="color:#2b91af">Task</span>&lt;TResult&gt;.Factory.</li><li>                StartNew(()=&gt;Start(state,_cancellationToken),_cancellationToken).</li><li style="background: #f3f3f3">                ContinueWith(x =&gt;</li><li>                                 Finish(x.Result,state),</li><li style="background: #f3f3f3">                                 _uiScheduler);</li><li>&nbsp;</li><li style="background: #f3f3f3">            <span style="color:#0000ff">return</span> <span style="color:#0000ff">this</span>;</li><li>        }</li><li style="background: #f3f3f3">&nbsp;</li><li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Cancel()</li><li style="background: #f3f3f3">        {</li><li>            _cancelationTokenSource.Cancel(<span style="color:#0000ff">true</span>);</li><li style="background: #f3f3f3">        }</li><li>    }</li><li style="background: #f3f3f3">}</li></ol></div></div>
<p><br /><br />usage<br /><br />&lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt;&lt;div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px"&gt;Code Snippet&lt;/div&gt;&lt;div style="background: #ddd; max-height: 300px; overflow: auto"&gt;&lt;ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Collections.Generic;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Linq;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Text;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Threading;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Windows;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Windows.Controls;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Windows.Data;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Windows.Documents;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Windows.Input;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Windows.Media;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Windows.Media.Imaging;&lt;/li&gt;&lt;li&gt;<span style="color:#0000ff">using</span> System.Windows.Navigation;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">using</span> System.Windows.Shapes;&lt;/li&gt;&lt;li&gt; &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;<span style="color:#0000ff">namespace</span> WpfApplication1&lt;/li&gt;&lt;li&gt;{&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;    <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;summary&gt;</span>&lt;/li&gt;&lt;li&gt;    <span style="color:#808080">///</span><span style="color:#008000"> Interaction logic for MainWindow.xaml</span>&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;    <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;/summary&gt;</span>&lt;/li&gt;&lt;li&gt;    <span style="color:#0000ff">public</span> <span style="color:#0000ff">partial</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainWindow</span> : <span style="color:#2b91af">Window</span>&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;    {&lt;/li&gt;&lt;li&gt;        &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        <span style="color:#0000ff">private</span> <span style="color:#2b91af">TBackgroundWorker</span>&lt;<span style="color:#0000ff">string</span>, <span style="color:#0000ff">int</span>&gt; _bg;&lt;/li&gt;&lt;li&gt; &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        <span style="color:#0000ff">public</span> MainWindow()&lt;/li&gt;&lt;li&gt;        {&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;            InitializeComponent();&lt;/li&gt;&lt;li&gt;        }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt; &lt;/li&gt;&lt;li&gt;        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> a_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">RoutedEventArgs</span> e)&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        {&lt;/li&gt;&lt;li&gt;            _bg = <span style="color:#2b91af">TBackgroundWorker</span>&lt;<span style="color:#0000ff">string</span>, <span style="color:#0000ff">int</span>&gt;.New().&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                StartWith(StartSomething).&lt;/li&gt;&lt;li&gt;                FinishWith(ShowResult).&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                Begin();&lt;/li&gt;&lt;li&gt;         }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt; &lt;/li&gt;&lt;li&gt;        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> ShowResult(<span style="color:#0000ff">string</span> obj,<span style="color:#0000ff">object</span> state)&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        {&lt;/li&gt;&lt;li&gt;            a.Content = obj;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        }&lt;/li&gt;&lt;li&gt; &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        <span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> StartSomething(<span style="color:#0000ff">object</span> arg, <span style="color:#2b91af">CancellationToken</span> cancellationToken)&lt;/li&gt;&lt;li&gt;        {&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;            <span style="color:#0000ff">int</span> i = 0;&lt;/li&gt;&lt;li&gt;            <span style="color:#0000ff">while</span> (i &lt; 200)&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;            {&lt;/li&gt;&lt;li&gt;                <span style="color:#0000ff">if</span> (cancellationToken.IsCancellationRequested)&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                {&lt;/li&gt;&lt;li&gt;                    <span style="color:#0000ff">return</span> <span style="color:#a31515">"Cacncelled"</span>;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                    &lt;/li&gt;&lt;li&gt;                }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                i++;&lt;/li&gt;&lt;li&gt;                <span style="color:#2b91af">Thread</span>.Sleep(50);&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;                _bg.ReportProgress(Report,i);&lt;/li&gt;&lt;li&gt;            }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt; &lt;/li&gt;&lt;li&gt;            <span style="color:#0000ff">return</span> <span style="color:#a31515">"Done"</span>;&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        }&lt;/li&gt;&lt;li&gt; &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> Report(<span style="color:#0000ff">int</span> obj)&lt;/li&gt;&lt;li&gt;        {&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;            a.Content = obj;&lt;/li&gt;&lt;li&gt;        }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt; &lt;/li&gt;&lt;li&gt;        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> Button_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">RoutedEventArgs</span> e)&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        {&lt;/li&gt;&lt;li&gt;            _bg.Cancel();&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        }&lt;/li&gt;&lt;li&gt; &lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;        &lt;/li&gt;&lt;li&gt;    }&lt;/li&gt;&lt;li style="background: #f3f3f3"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</p>
:ET