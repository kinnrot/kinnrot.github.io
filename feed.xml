<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.5">Jekyll</generator><link href="https://kinnrot.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kinnrot.github.io/" rel="alternate" type="text/html" /><updated>2017-08-01T10:05:08+03:00</updated><id>https://kinnrot.github.io/</id><title type="html">cdblg</title><subtitle>An amazing website.</subtitle><author><name>Chen Kinnrot</name><email>kinnrot@gmail.com</email></author><entry><title type="html">Octopress 101</title><link href="https://kinnrot.github.io/octopress101/" rel="alternate" type="text/html" title="Octopress 101" /><published>2017-07-25T22:45:07+03:00</published><updated>2017-07-25T22:45:07+03:00</updated><id>https://kinnrot.github.io/octopress101</id><content type="html" xml:base="https://kinnrot.github.io/octopress101/">&lt;p&gt;I decided to develop my own blog like all the other cool developers.
If you got here, this is what I got so far, it’s not too much, but it’s a start.&lt;/p&gt;

&lt;p&gt;When I develop something my rules are very simple&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid writing any code.&lt;/li&gt;
  &lt;li&gt;Keep it simple.&lt;/li&gt;
  &lt;li&gt;Easy to deploy on free hosting environment.&lt;/li&gt;
  &lt;li&gt;Decent code syntax highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I heard(mostly in www) people talking about jekyll as a static web site generator and began to dig dipper,
I searched a few ruby gems for blogging and found a gem called &lt;a href=&quot;https://github.com/octopress/octopress octopress v3&quot;&gt;octopress&lt;/a&gt;.
They, the guys who developed it, calls it Jekyll’s Ferrari, sounds good to me, looked pretty straight forward so I gave it a spin.&lt;/p&gt;

&lt;p&gt;First thing you need to do it to create a new project for your blog (just a new folder)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir my-blog&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next you should create a Gemfile for easy dependency management.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install bundler
bundle init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now lets add octopress as a dependency, inside your Gemfile add&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'octopress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 3.0'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we should tell bundle to install gems from Gemfile, in terminal run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Everything is set up, now according to &lt;a href=&quot;https://github.com/octopress/octopress octopress&quot;&gt;octopress&lt;/a&gt; all we need to do
is to run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;octopress init &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we have a blog ready.&lt;/p&gt;

&lt;p&gt;Now you probably have a blog somewhere, mine is at &lt;a href=&quot;kinnrot.blogspot.com&quot;&gt;blogger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I thought to my self it would be nice to import all my posts to the new blog, well it’s super easy, jekyll has many importers
read more about it &lt;a href=&quot;https://import.jekyllrb.com/docs/home/ migrations&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after 3 clicks and one script I got all my old posts on my new blog.&lt;/p&gt;

&lt;p&gt;Whats next?
Well I need some theme, cause I can’t design at all, I just know how to design code, when it comes to colors layout and fonts, I suck.&lt;/p&gt;

&lt;p&gt;I googled a bit and found &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-themes&quot;&gt;that&lt;/a&gt; and chose to start simple
 with minima, which is minimal and simple to install and work with&lt;/p&gt;

&lt;p&gt;you just need to add it to your Gemfile&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minima'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;set the theme property in _config.yaml to minima and you are good to go, by running ‘jekyll build’ you’ll be able to see your blog
site generated in the _site filder.&lt;/p&gt;

&lt;p&gt;Now we just need to deploy it the easy way, this is where octopress helps.
I use github pages, which is very simple to set up, you just need to create a github repo named:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‘&lt;your user=&quot;&quot; name=&quot;&quot;&gt;.github.io'&lt;/your&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;then run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ocopress deploy init git &amp;lt;your full repo url&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;now make sure you are not on master branch and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production jekyll build
&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production octopress deploy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;thats it you got your blog on jekyll published on git hub.&lt;/p&gt;

&lt;h4 id=&quot;refereces&quot;&gt;Refereces&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt;Github pages&lt;/a&gt;&lt;/p&gt;</content><author><name>Chen Kinnrot</name></author><category term="jekyll" /><category term="octopress" /><category term="ruby" /><summary type="html">I decided to develop my own blog like all the other cool developers. If you got here, this is what I got so far, it’s not too much, but it’s a start.</summary></entry><entry><title type="html">Watch out for reference duplication instead of instance duplication</title><link href="https://kinnrot.github.io/watch-out-for-reference-duplication/" rel="alternate" type="text/html" title="Watch out for reference duplication instead of instance duplication" /><published>2017-07-18T14:42:00+03:00</published><updated>2017-07-18T14:42:00+03:00</updated><id>https://kinnrot.github.io/watch-out-for-reference-duplication</id><content type="html" xml:base="https://kinnrot.github.io/watch-out-for-reference-duplication/">&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: white;&quot;&gt;# This code will generate 96 instances&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: white;&quot;&gt;ViewStatData &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Struct&lt;/span&gt;.new(&lt;span style=&quot;color: #6d9cbe;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;background-color: #283b5e; color: #6d9cbe;&quot;&gt;total&lt;/span&gt;, &lt;span style=&quot;color: #6d9cbe;&quot;&gt;:target&lt;/span&gt;, &lt;span style=&quot;color: #6d9cbe;&quot;&gt;:ratio&lt;/span&gt;)&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;96&lt;/span&gt;.times.map {&lt;span style=&quot;color: #cc7833;&quot;&gt;|&lt;/span&gt;_&lt;span style=&quot;color: #cc7833;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;ViewStatData&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)}&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;# And this will not, it'll generate 96 pointers&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;[ViewStatData&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)] * 96&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;# So Watch out!!!&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;</content><author><name>Chen Kinnrot</name></author><category term="Ruby" /><summary type="html"># This code will generate 96 instancesViewStatData = Struct.new(:total, :target, :ratio)96.times.map {|_|ViewStatData.new(0, 0, 0)}# And this will not, it'll generate 96 pointers[ViewStatData.new(0, 0, 0)] * 96# So Watch out!!!</summary></entry><entry><title type="html">Ruby Lazy chunked hash like behavior</title><link href="https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior/" rel="alternate" type="text/html" title="Ruby Lazy chunked hash like behavior" /><published>2017-06-05T15:11:00+03:00</published><updated>2017-06-05T15:11:00+03:00</updated><id>https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior</id><content type="html" xml:base="https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior/">&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;When we want to iterate a long list, we can simply write a query and get a cursor, ActiveRecord will do all the heavy lifting for us.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;What happens when we need to do some complicated computations on a set of data, which sometimes can be too big to be stored in memory for the entire computing process?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;This is when we need to start being more creational.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I'd like to introduce what I came up with.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;The problem:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Complex calculation on time based data series for a period of 3 months.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Each calculation may depends on previous one and on future and past data.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Must be in order.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- When fetching all data server crash on memory.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;The solution:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I wanted to do the most minor code change possible, and currently the data was accessed via a hash.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I decided to encapsulate the hash with something I called lazy chunked hash (tried google it see it as standard behavior in clojure).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;It looks like this:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;class &lt;/span&gt;&lt;span style=&quot;color: white;&quot;&gt;ValuesProvider&lt;/span&gt;&lt;span style=&quot;color: white;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;initialize&lt;/span&gt;()&lt;br /&gt;    &lt;span style=&quot;color: #d0d0ff;&quot;&gt;@loaded_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= nil&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;background-color: #3c3c57; color: #d0d0ff;&quot;&gt;    @hash&lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Hash&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;[]&lt;/span&gt;(time_slot)     get(time_slot)   &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  private&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;get&lt;/span&gt;(time_slot)     &lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;time_slot.to_date     &lt;span style=&quot;color: #cc7833;&quot;&gt;unless &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;== &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;@loaded_date&lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;      &lt;/span&gt;load(&lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date&lt;/span&gt;)     &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;@hash&lt;/span&gt;[time_slot.to_i]   &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Pretty simple and does the work, instead of loading the data all at once, the data is being loaded for each day separately, this way we keep it chunky but not too chunky.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;And best part, my code that consume the data, didn't change because of the [] method, which makes my ValueProvider behave like an array.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;This solution is good when the consumer data request(call for[]) implies on what data should be loaded, which most of the times will, but in some cases it won't)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Chen Kinnrot</name></author><category term="Design" /><category term="memory leak" /><category term="Ruby" /><category term="Dynamic-languages" /><summary type="html">When we want to iterate a long list, we can simply write a query and get a cursor, ActiveRecord will do all the heavy lifting for us.What happens when we need to do some complicated computations on a set of data, which sometimes can be too big to be stored in memory for the entire computing process?This is when we need to start being more creational.I'd like to introduce what I came up with.The problem:- Complex calculation on time based data series for a period of 3 months.- Each calculation may depends on previous one and on future and past data.- Must be in order.- When fetching all data server crash on memory.The solution:I wanted to do the most minor code change possible, and currently the data was accessed via a hash.&amp;nbsp;I decided to encapsulate the hash with something I called lazy chunked hash (tried google it see it as standard behavior in clojure).It looks like this:class ValuesProvider def initialize() @loaded_date = nil @hash = Hash.new(0) end def [](time_slot) get(time_slot) end private def get(time_slot) relevant_date = time_slot.to_date unless relevant_date == @loaded_date load(relevant_date) end @hash[time_slot.to_i] endendPretty simple and does the work, instead of loading the data all at once, the data is being loaded for each day separately, this way we keep it chunky but not too chunky.And best part, my code that consume the data, didn't change because of the [] method, which makes my ValueProvider behave like an array.&amp;nbsp;&amp;nbsp;This solution is good when the consumer data request(call for[]) implies on what data should be loaded, which most of the times will, but in some cases it won't)</summary></entry><entry><title type="html">Rubymine on OSX memory issues</title><link href="https://kinnrot.github.io/rubymine-on-osx/" rel="alternate" type="text/html" title="Rubymine on OSX memory issues" /><published>2015-01-06T23:32:00+02:00</published><updated>2015-01-06T23:32:00+02:00</updated><id>https://kinnrot.github.io/rubymine-on-osx</id><content type="html" xml:base="https://kinnrot.github.io/rubymine-on-osx/">I found this only today, you should run Rubymine as 32 bit process.&lt;br /&gt;It works much faster and consume half the memory.&lt;br /&gt;&lt;br /&gt;To set this got to the Applicaitons folder right click on rubymine-&amp;gt;get info and check the &quot;open in 32 bit mode&quot;&lt;br /&gt;&lt;br /&gt;Thats all!&lt;br /&gt;&lt;br /&gt;</content><author><name>Chen Kinnrot</name></author><category term="OSX" /><category term="memory leak" /><category term="Ruby" /><category term="Rubymine" /><summary type="html">I found this only today, you should run Rubymine as 32 bit process.It works much faster and consume half the memory.To set this got to the Applicaitons folder right click on rubymine-&amp;gt;get info and check the &quot;open in 32 bit mode&quot;Thats all!</summary></entry><entry><title type="html">Use FactoryGirl And Faker for easy data generation in unit testing (Part1)</title><link href="https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data/" rel="alternate" type="text/html" title="Use FactoryGirl And Faker for easy data generation in unit testing (Part1)" /><published>2014-11-15T17:52:00+02:00</published><updated>2014-11-15T17:52:00+02:00</updated><id>https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data</id><content type="html" xml:base="https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data/">The &amp;nbsp;most irritating thing in writing tests is the data generation preparation process, sometimes you want to create an object with 20 fields that 10 of them are mandatory but you only care about the value of 1, and you don't want to mock, cause you interact with other methods and object that fetch this model from db.&lt;br /&gt;&lt;br /&gt;To me it happens a lot so I found the FactoryGirl + Faker combination that made my life much more easy and now I can write tests in peace.&lt;br /&gt;&lt;br /&gt;To add them just put in Gemfile:&lt;br /&gt;&lt;br /&gt;&amp;nbsp;gem &quot;factory_girl_rails&quot;, &quot;~&amp;gt; 4.0&quot;&lt;br /&gt;&amp;nbsp; gem &quot;faker&quot;&lt;br /&gt;&lt;br /&gt;So lets take a complex sample to explain all there is to know.&lt;br /&gt;&lt;br /&gt;We have a User, the User belongs to a Company, User has many tasks.&lt;br /&gt;&lt;br /&gt;Company has many irritating mandatory fields&lt;br /&gt;&lt;br /&gt;Lets define the Company Factory:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; border: 0.01mm solid rgb(0, 0, 0); font-size: 12pt; line-height: 100%;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.define &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;do&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;    factory &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;:company&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;do&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;      name {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.name}&lt;br /&gt;      trp {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      grp {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      budget {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.number(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      cpm {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;70&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      trp_price {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;700&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;100000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      total_viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;200000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      unique_viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;50000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      spots {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;As you can see I define lots of fields with random values.&lt;br /&gt;&lt;br /&gt;Now we can create a company by writing&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;create(:company)&lt;/blockquote&gt;Or just build one (without save to db) by calling&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;build(:company)&amp;nbsp;&lt;/blockquote&gt;&lt;br /&gt;That's all for now, I'll continue in part2.&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp;&lt;/blockquote&gt;</content><author><name>Chen Kinnrot</name></author><summary type="html">The &amp;nbsp;most irritating thing in writing tests is the data generation preparation process, sometimes you want to create an object with 20 fields that 10 of them are mandatory but you only care about the value of 1, and you don't want to mock, cause you interact with other methods and object that fetch this model from db.To me it happens a lot so I found the FactoryGirl + Faker combination that made my life much more easy and now I can write tests in peace.To add them just put in Gemfile:&amp;nbsp;gem &quot;factory_girl_rails&quot;, &quot;~&amp;gt; 4.0&quot;&amp;nbsp; gem &quot;faker&quot;So lets take a complex sample to explain all there is to know.We have a User, the User belongs to a Company, User has many tasks.Company has many irritating mandatory fieldsLets define the Company Factory:FactoryGirl.define do factory :company do name {Faker::Name.name} trp {Faker::Number.between(0,10)} grp {Faker::Number.between(0,5)} budget {Faker::Number.number(4)} cpm {Faker::Number.between(1,70)} trp_price {Faker::Number.between(100,700)} viewer {Faker::Number.between(0,100000)} total_viewer {Faker::Number.between(0,200000)} unique_viewer {Faker::Number.between(0,50000)} spots {Faker::Number.between(0,1000)} end endAs you can see I define lots of fields with random values.Now we can create a company by writingcreate(:company)Or just build one (without save to db) by callingbuild(:company)&amp;nbsp;That's all for now, I'll continue in part2.&amp;nbsp;&amp;nbsp;</summary></entry><entry><title type="html">Get the user locale from http headers</title><link href="https://kinnrot.github.io/get-user-locale-from-http-headers/" rel="alternate" type="text/html" title="Get the user locale from http headers" /><published>2014-11-15T17:42:00+02:00</published><updated>2014-11-15T17:42:00+02:00</updated><id>https://kinnrot.github.io/get-user-locale-from-http-headers</id><content type="html" xml:base="https://kinnrot.github.io/get-user-locale-from-http-headers/">If you want to provide default localization support for guest user in your website yo can locate their browser locale by the following code:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;pre style=&quot;border: 0.01mm solid rgb(0, 0, 0); font-size: 12pt; line-height: 100%;&quot;&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt; extract_locale_from_header&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;unless&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt; request.env[&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'HTTP_ACCEPT_LANGUAGE'&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;].nil?&lt;br /&gt;      &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt; request.env[&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'HTTP_ACCEPT_LANGUAGE'&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;].scan(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;^[a-z]{2}&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;).first&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'en'&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;br /&gt;This way you can determine on server side the locale of the user currently entered your site.</content><author><name>Chen Kinnrot</name></author><category term="rails" /><category term="locale" /><category term="localization" /><category term="language" /><category term="Ruby" /><summary type="html">If you want to provide default localization support for guest user in your website yo can locate their browser locale by the following code:def extract_locale_from_header unless request.env['HTTP_ACCEPT_LANGUAGE'].nil? return request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first end 'en' endThis way you can determine on server side the locale of the user currently entered your site.</summary></entry><entry><title type="html">Dedicating a DJ(Delayed job) worker to a specific queue in heroku.</title><link href="https://kinnrot.github.io/dedicating-djdelayed-job-worker-to/" rel="alternate" type="text/html" title="Dedicating a DJ(Delayed job) worker to a specific queue in heroku." /><published>2014-11-15T17:34:00+02:00</published><updated>2014-11-15T17:34:00+02:00</updated><id>https://kinnrot.github.io/dedicating-djdelayed-job-worker-to</id><content type="html" xml:base="https://kinnrot.github.io/dedicating-djdelayed-job-worker-to/">Let's say you have a vey important procedure that takes a while, and you need to process it in background, but you still want to execute ASAP.&lt;br /&gt;&lt;br /&gt;I'm using Delayed Job on Heroku, and could not find a lot of tutorials to do this simple task.&lt;br /&gt;&lt;br /&gt;So here is the simplest way to achieve this ability, you can raise a process/deamon &amp;nbsp;that will have only one queue to work on. (Dealyed job worker by default is queue agnostic, just process all jobs)&lt;br /&gt;&lt;br /&gt;In procfile:&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;urgentworker: &amp;nbsp;QUEUE=urgent bundle exec rake jobs:work&lt;/blockquote&gt;&lt;br /&gt;You can call the worker in any name you want and even define multiple workers for multiple queues.&lt;br /&gt;And in the &quot;urgent&quot; job just define the queue name to be &quot;urgent&quot; the worker will process only jobs in this queue.&lt;br /&gt;&lt;br /&gt;example:&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;handle_asynchronously :some_job, :queue =&amp;gt; &quot;urgent'&lt;/blockquote&gt;&lt;br /&gt;This will also work for Resque.&lt;br /&gt;&lt;br /&gt;Notice that for rescue you can write QUEUE=* &lt;b&gt;but for delayed job you can't.&lt;/b&gt;</content><author><name>Chen Kinnrot</name></author><category term="asynctask" /><category term="heroku" /><category term="rails" /><category term="queueing" /><category term="delayed job" /><category term="Ruby" /><summary type="html">Let's say you have a vey important procedure that takes a while, and you need to process it in background, but you still want to execute ASAP.I'm using Delayed Job on Heroku, and could not find a lot of tutorials to do this simple task.So here is the simplest way to achieve this ability, you can raise a process/deamon &amp;nbsp;that will have only one queue to work on. (Dealyed job worker by default is queue agnostic, just process all jobs)In procfile:urgentworker: &amp;nbsp;QUEUE=urgent bundle exec rake jobs:workYou can call the worker in any name you want and even define multiple workers for multiple queues.And in the &quot;urgent&quot; job just define the queue name to be &quot;urgent&quot; the worker will process only jobs in this queue.example:handle_asynchronously :some_job, :queue =&amp;gt; &quot;urgent'This will also work for Resque.Notice that for rescue you can write QUEUE=* but for delayed job you can't.</summary></entry><entry><title type="html">Overriding default id in mongoid</title><link href="https://kinnrot.github.io/overriding-default-id-in-mongoid/" rel="alternate" type="text/html" title="Overriding default id in mongoid" /><published>2014-11-15T17:20:00+02:00</published><updated>2014-11-15T17:20:00+02:00</updated><id>https://kinnrot.github.io/overriding-default-id-in-mongoid</id><content type="html" xml:base="https://kinnrot.github.io/overriding-default-id-in-mongoid/">This is an easy one, just want to make sure it's clear.&lt;br /&gt;&lt;br /&gt;Add the following field to your model:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;field &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #6d9cbe;&quot;&gt;:_id&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;, type: &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #6d9cbe;&quot;&gt;Moped&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #6d9cbe;&quot;&gt;BSON&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #6d9cbe;&quot;&gt;ObjectId&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;/pre&gt;&lt;br /&gt;And to allow setting it:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 14pt; line-height: 100%; padding: 4px;&quot;&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;1 &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #cc7833;&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt; id=(id)&lt;br /&gt;2   &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #cc7833;&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #6d9cbe;&quot;&gt;:_id&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #cc7833;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #e6e1dc;&quot;&gt; id&lt;br /&gt;3 &lt;/span&gt;&lt;span style=&quot;background-color: #2b2b2b; color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Now you can just do obj.id=[Some ObjectId] and save the object.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Chen Kinnrot</name></author><category term="mongodb" /><category term="mongoid" /><category term="Ruby" /><summary type="html">This is an easy one, just want to make sure it's clear.Add the following field to your model:field :_id, type: Moped::BSON::ObjectIdAnd to allow setting it:1 def id=(id)2 self[:_id] = id3 endNow you can just do obj.id=[Some ObjectId] and save the object.</summary></entry><entry><title type="html">Nice post about cyber war</title><link href="https://kinnrot.github.io/nice-post-about-cyber-war/" rel="alternate" type="text/html" title="Nice post about cyber war" /><published>2014-10-05T10:42:00+03:00</published><updated>2014-10-05T10:42:00+03:00</updated><id>https://kinnrot.github.io/nice-post-about-cyber-war</id><content type="html" xml:base="https://kinnrot.github.io/nice-post-about-cyber-war/">Popular Science: The War Of Zeros And Ones. http://google.com/newsstand/s/CBIwvZm5zho</content><author><name>Chen Kinnrot</name></author><category term="cyber" /><summary type="html">Popular Science: The War Of Zeros And Ones. http://google.com/newsstand/s/CBIwvZm5zho</summary></entry><entry><title type="html">ClusteTV is hiring</title><link href="https://kinnrot.github.io/clustetv-is-hiring/" rel="alternate" type="text/html" title="ClusteTV is hiring" /><published>2014-08-08T17:40:00+03:00</published><updated>2014-08-08T17:40:00+03:00</updated><id>https://kinnrot.github.io/clustetv-is-hiring</id><content type="html" xml:base="https://kinnrot.github.io/clustetv-is-hiring/">&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;div class=&quot;p1&quot;&gt;Cluster TV is looking for it's next programmer/Superstar!&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;If you can:&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Write code like an Effin' machine&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Test your OWN code&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Speak English like it's your mother's tongue&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Handle challenges&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Be self-driven &amp;amp; independent&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;We would also appreciate if you'll have:&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Great communications skills&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Independent thinking&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Passion to learn new things&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* RoR or Angular experience&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Coffee script knowledge&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* NOSQL understanding&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;Then we want you!&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;What we offer:&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Great and professional team.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Opportunity to become an integral part of an innovative TV solution.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* A chance to learn from the best in the industry.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Full time job in the Tel Aviv area.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Unlimited supply of food and beer. Really.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;* Flexible work hours.&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;If you like what you see and have da skillz, drop us an email at &lt;a href=&quot;mailto:chen@clustertv.com&quot;&gt;chen@clustertv.com&lt;/a&gt;&lt;br /&gt;Or, call me&amp;nbsp;&lt;a href=&quot;tel: +972 542124335&quot; target=&quot;_blank&quot;&gt;tel: +972 542124335&lt;/a&gt;&lt;span style=&quot;line-height: 1.15;&quot;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;Good luck!&lt;/div&gt;&lt;/div&gt;</content><author><name>Chen Kinnrot</name></author><summary type="html">Cluster TV is looking for it's next programmer/Superstar!If you can:* Write code like an Effin' machine* Test your OWN code* Speak English like it's your mother's tongue* Handle challenges* Be self-driven &amp;amp; independentWe would also appreciate if you'll have:* Great communications skills* Independent thinking* Passion to learn new things* RoR or Angular experience* Coffee script knowledge* NOSQL understandingThen we want you!What we offer:* Great and professional team.* Opportunity to become an integral part of an innovative TV solution.* A chance to learn from the best in the industry.* Full time job in the Tel Aviv area.* Unlimited supply of food and beer. Really.* Flexible work hours.If you like what you see and have da skillz, drop us an email at chen@clustertv.comOr, call me&amp;nbsp;tel: +972 542124335.Good luck!</summary></entry></feed>