<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://kinnrot.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kinnrot.github.io/" rel="alternate" type="text/html" /><updated>2019-03-17T16:36:04+02:00</updated><id>https://kinnrot.github.io/feed.xml</id><title type="html">cdblg</title><subtitle>An amazing website.</subtitle><author><name>Chen Kinnrot</name><email>kinnrot@gmail.com</email></author><entry><title type="html">Android Lifecycle Aware Modal</title><link href="https://kinnrot.github.io/android-lifecycle-aware-modal/" rel="alternate" type="text/html" title="Android Lifecycle Aware Modal" /><published>2018-10-25T18:43:04+03:00</published><updated>2018-10-25T18:43:04+03:00</updated><id>https://kinnrot.github.io/android-lifecycle-aware-modal</id><content type="html" xml:base="https://kinnrot.github.io/android-lifecycle-aware-modal/">&lt;p&gt;Sometimes we want to show the user an alert when somethings wrong or we just need to give some extra info,
For example; Ask the user if he is sure he wanna leave the app.&lt;/p&gt;

&lt;p&gt;This can be achieved with the following code (runs inside activity):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Are you sure you want to exit?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCancelable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPositiveButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@YourActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setNegativeButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works fine, buy there is one annoying issue, If user clicks home button while dialog displayed, and go back to the app, the dialog will still be there.
Now your user experience is seeing a question about getting out of the app while he just went in.&lt;/p&gt;

&lt;p&gt;To avoid this case, I found an easy solution by making my modal lifecycle aware, If your’e not sure whats lifecycle, consider read about it &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/lifecycle&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every activity/fragment implements the LifecycleOwner interface so lets add the following method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscribeToLifecycleEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dismissHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lifecycleObserver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericLifecycleObserver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ON_PAUSE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isShowing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;dismissHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;lifecycleOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycleObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnDismissListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycleOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycleObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method make every dialog lifecycle aware, meaning, if we add subscription to the dialog display:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Are you sure you want to exit?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCancelable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPositiveButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@YourActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setNegativeButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;subscribeToLifecycleEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add subscription&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time the lifecycle owner of the modal (fragment activity or custom implementation) is paused, the 
dialog will be automatically dismissed.&lt;/p&gt;

&lt;p&gt;Lifecycle architecture opens many options related to bind ui interactions with lifecycle which is extremely important for a mobile phone
that can get interrupts like phone calls and messages all the time.&lt;/p&gt;</content><author><name>Chen Kinnrot</name></author><category term="android" /><category term="arch" /><category term="lifecycle" /><summary type="html">Sometimes we want to show the user an alert when somethings wrong or we just need to give some extra info, For example; Ask the user if he is sure he wanna leave the app.</summary></entry><entry><title type="html">Live Data Pitfall You Should Be Aware Of</title><link href="https://kinnrot.github.io/live-data-pitfall-you-should-be-aware-of/" rel="alternate" type="text/html" title="Live Data Pitfall You Should Be Aware Of" /><published>2018-10-22T08:12:18+03:00</published><updated>2018-10-22T08:12:18+03:00</updated><id>https://kinnrot.github.io/live-data-pitfall-you-should-be-aware-of</id><content type="html" xml:base="https://kinnrot.github.io/live-data-pitfall-you-should-be-aware-of/">&lt;p&gt;When working with &lt;code class=&quot;highlighter-rouge&quot;&gt;MutableLiveData&lt;/code&gt; you can update the observable value in 2 ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postValue&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both will update the live data value as expected as long as your code is running from the main thread.&lt;/p&gt;

&lt;p&gt;If you need to update a value from other thread you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;postValue&lt;/code&gt; which is thread safe, and will make sure to notify observers on main thread.&lt;/p&gt;

&lt;p&gt;This is all nice, but be aware!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and that&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both this and that sets the live data value to true and then to false, so you probably expect, if observing foo, you’ll get your code to run twice,
once with true and once with false.&lt;/p&gt;

&lt;p&gt;Well for the first section with &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt; it works as expected.&lt;/p&gt;

&lt;p&gt;For the second section with &lt;code class=&quot;highlighter-rouge&quot;&gt;postValue&lt;/code&gt; you’ll get a surprise, only second call triggers the observer, or is it?&lt;/p&gt;

&lt;p&gt;The issue with post value is as follows:&lt;/p&gt;

&lt;p&gt;Value is being set immediately in a synchronized code block for thread safety, 
but the observers notification is scheduled to execute on main thread via the event loop (with handler)
So whats happening is value changes to true and false but scheduling code occurs only once.&lt;/p&gt;

&lt;p&gt;this is the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;postValue&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mDataLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;postTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPendingData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;mPendingData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ArchTaskExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postToMainThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mPostValueRunnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can &lt;code class=&quot;highlighter-rouge&quot;&gt;postTask&lt;/code&gt; is a flag that say “do I need to schedule a runnable to notify my observers, or did I already do that?”
for the first call &lt;code class=&quot;highlighter-rouge&quot;&gt;postTask&lt;/code&gt; is true, and for the second its false&lt;/p&gt;

&lt;p&gt;postValue is good for ui progress reporting for example, cause ui updates only when main thread is available to perform screen updates.
It’s not good when you count on getting notified for each change of the LiveDataValue.&lt;/p&gt;

&lt;p&gt;as comment says:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you called this method multiple times before a main thread executed a posted task, only the last value would be dispatched.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I recommend, by default, prefer using &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt;, use postValue, only when:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;you gonna post lots of changes (progress) and you don’t need all of them only last value is relevant.&lt;/li&gt;
  &lt;li&gt;you not running on the main thread.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Chen Kinnrot</name></author><category term="android" /><category term="arch" /><category term="lifecycle" /><summary type="html">When working with MutableLiveData you can update the observable value in 2 ways:</summary></entry><entry><title type="html">Choosing the Right WordPress Hosting Service</title><link href="https://kinnrot.github.io/choosing-the-right-wordpress-hosting-service/" rel="alternate" type="text/html" title="Choosing the Right WordPress Hosting Service" /><published>2018-09-10T21:35:12+03:00</published><updated>2018-09-10T21:35:12+03:00</updated><id>https://kinnrot.github.io/choosing-the-right-wordpress-hosting-service</id><content type="html" xml:base="https://kinnrot.github.io/choosing-the-right-wordpress-hosting-service/">&lt;p&gt;I needed to choose WordPress hosting service for some of clients and decided to do some research to figure out what’s best value for each client needs.&lt;/p&gt;

&lt;p&gt;There are many service providers in this area, After lots of googling I decided to focus on the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.com/create/?aff=9716&amp;amp;cid=958799&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluehost.com/track/kinnrot/&quot;&gt;BlueHost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kinsta.com/?utm_source=kinnrot.github.io&quot;&gt;Kinsta&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wordpress&quot;&gt;WordPress&lt;/h2&gt;
&lt;p&gt;If you’re building a new site/blog without any technical knowledge, &lt;a href=&quot;https://wordpress.com/create/?aff=9716&amp;amp;cid=958799&quot;&gt;WordPress&lt;/a&gt; is the right place for you,
owned by the official word press organization offering limited capabilities cheap plans, and more expensive plans with
more options like upload a custom theme, and charging money via paypal.&lt;/p&gt;

&lt;p&gt;They also got a free plan, but you won’t get to use your own domain name.&lt;/p&gt;

&lt;h2 id=&quot;bluehost&quot;&gt;BlueHost&lt;/h2&gt;
&lt;p&gt;This is the most economy wise solution.&lt;/p&gt;

&lt;p&gt;If you have technical knowledge and you have a custom theme, and wanna save money, this is the service for you, 
It’s a managed solution with one click WordPress install. &lt;a href=&quot;https://www.bluehost.com/track/kinnrot/&quot;&gt;BlueHost&lt;/a&gt; also offers additional services like seo optimization tool, and backup tool for additional cost.&lt;/p&gt;

&lt;h2 id=&quot;kinsta&quot;&gt;Kinsta&lt;/h2&gt;
&lt;p&gt;For those of you who run a serious operation but don’t wanna setup their own dev ops,
and dont have more than 100K monthly visits / don’t mind to pay a lot on your web site,
This is the service for you, you get:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One click SSL setup with &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;let’s encrypt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Premium DNS by amazon&lt;/li&gt;
  &lt;li&gt;Staging environment with one click push to production&lt;/li&gt;
  &lt;li&gt;One click CDN setup&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those of you who want to dig deeper there are many other providers and guides on how to choose the best one for your needs,
I found &lt;a href=&quot;https://www.wpbeginner.com/wordpress-hosting/?utm_source=kinnrot.github.io&quot;&gt;this link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Chen Kinnrot</name></author><category term="hosting" /><category term="wp" /><category term="wordpress" /><category term="kinsta" /><category term="bluehost" /><category term="letsencrypt" /><summary type="html">I needed to choose WordPress hosting service for some of clients and decided to do some research to figure out what’s best value for each client needs.</summary></entry><entry><title type="html">From jQuery to Stimulus</title><link href="https://kinnrot.github.io/from-jquery-to-stimulus/" rel="alternate" type="text/html" title="From jQuery to Stimulus" /><published>2018-05-22T12:10:10+03:00</published><updated>2018-05-22T12:10:10+03:00</updated><id>https://kinnrot.github.io/from-jquery-to-stimulus</id><content type="html" xml:base="https://kinnrot.github.io/from-jquery-to-stimulus/">&lt;p&gt;I tried to build an &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt; without a shiny client side framework, I wanted to build something fast with good user experience and keeping it as simple as possible.&lt;/p&gt;

&lt;p&gt;I decided to take &lt;a href=&quot;https://rubyonrails.org/&quot;&gt;rails&lt;/a&gt;, use &lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot;&gt;turbolinks&lt;/a&gt; and a avoid javascript till its a must.&lt;/p&gt;

&lt;p&gt;It didn’t take more than a few hours and I found myself writing javascript. What I needed to do is simple, I had an input with number, and 2 buttons next to it, one to increase values by 1 and on to decrease it looked like this:&lt;/p&gt;

&lt;p&gt;&lt;button&gt;-&lt;/button&gt;&lt;span&gt; 0&lt;/span&gt;&lt;button&gt;+&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;jQuery to the rescue, I had a list of those buttons, so I needed to identify each one, so I added a data-id attr and used it to identify which input I need to update it looked like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;`
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;minus&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;readonly=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;readonly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plus&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;+&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
`&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// number_componenet.js&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumberComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
      &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button[name=&quot;plus&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
          &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button[name=&quot;minus&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As You can see I added a bit of client side validation to make sure counter does not go below 0 and above 20.
Now All left to do is to initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;NumberComponent&lt;/code&gt; when the page loads, so I added it to my packs (I’m using &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt;) and wrote:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GameOrderComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And it works!.&lt;/p&gt;

&lt;p&gt;but it’s already a bit of a mess, I need to search for the relevant buttons, I don’t know how it’ll behave when 
content of page changes (turbolinks, other dynamic behavior etc.) I though to myslef, “it would be much easier to annotate the relevant html items to describe their behavior”.
But I did not want to make the client super complex, I just want something that’ll help me to model my code without all the hassle.&lt;/p&gt;

&lt;p&gt;I did some research (very intensive googling) and found &lt;a href=&quot;https://github.com/stimulusjs/stimulus&quot;&gt;Stimulus&lt;/a&gt;.
Its a library that decouples your javascript from the html like css decouple styling from html, which is pretty nice.&lt;/p&gt;

&lt;p&gt;The concepts are pretty simple and familiar, you got:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Controller - to group a bunch of html elements in one context (numberController)&lt;/li&gt;
  &lt;li&gt;Target - to allow access dom element inside the controller (instead of jQuery selector) (input)&lt;/li&gt;
  &lt;li&gt;Action - to respond to dom element event and act (button click)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all, simple huh?&lt;/p&gt;

&lt;p&gt;This is how it looks&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;`
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click-&amp;gt;number#minusOne&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;number.input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;readonly=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;readonly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click-&amp;gt;number#plusOne&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;+&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
`&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// number_controller.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stimulus&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;minusOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;plusOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I didn’t write less code but,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The code is more readable&lt;/li&gt;
  &lt;li&gt;No need to initialize the controller, Stimulus take care of that.&lt;/li&gt;
  &lt;li&gt;You get access to the actual html element, which keeps everything straightforward.&lt;/li&gt;
  &lt;li&gt;No need to worry about dom changes, Stimulus take care of that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that everyone thinks react angular and vue is the s*** but I think its good for large organizations where you have a separate front-end team and back-end team. 
When you build something new by yourself or with some friends, there is no good reason to start with client side rendering (unless you got a few million users on day one which is less likely)&lt;/p&gt;

&lt;p&gt;There are also small companies with a team of full stackers, who might also consider this approach.&lt;/p&gt;

&lt;p&gt;If you got a bit stimulated, you can read a small guide &lt;a href=&quot;https://stimulusjs.org/handbook/introduction&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>Chen Kinnrot</name></author><category term="ruby" /><category term="stimulus" /><category term="rails" /><category term="jquery" /><summary type="html">I tried to build an SPA without a shiny client side framework, I wanted to build something fast with good user experience and keeping it as simple as possible.</summary></entry><entry><title type="html">Ruby async await</title><link href="https://kinnrot.github.io/ruby-async-await/" rel="alternate" type="text/html" title="Ruby async await" /><published>2017-08-08T18:12:46+03:00</published><updated>2017-08-08T18:12:46+03:00</updated><id>https://kinnrot.github.io/ruby-async-await</id><content type="html" xml:base="https://kinnrot.github.io/ruby-async-await/">&lt;p&gt;There is a lot of buzz about asyc await from the javascript world, the concept is very simple and make your code much more
readable.&lt;/p&gt;

&lt;p&gt;You want to execute something without blocking the main thread but you want the next line of code to run once the non blocking code finish, meaning continue
code execution in its written order.&lt;/p&gt;

&lt;p&gt;Ruby has a great &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot;&gt;concurrency gem&lt;/a&gt; which basically encapsulate low level threading and synchronization code
to common patterns like Future, Promise, Actor and much more.&lt;/p&gt;

&lt;p&gt;I’d like to talk about concurrent-ruby async await feature, lets look at the following code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'concurrent'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Reporter&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep_dur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep_dur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The class Reporter knows to do 1 thing, report, it’ll sleep and print it’s thread id and a message
So if we’ll open an irb and call&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Reporter:0x007f86b19e1940 @__async_initialized__=true, @__async_delegator__=#&amp;lt;Concurrent::Async::AsyncDelegator:0x007f86b19e18a0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e1850&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e1828&amp;gt;, @delegate=#&amp;lt;Reporter:0x007f86b19e1940 ...&amp;gt;, @queue=[], @executor=#&amp;lt;Concurrent::ThreadPoolExecutor:0x007f86b19e0e78 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0d88&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0d60&amp;gt;, @min_length=8, @max_length=2147483647, @idletime=60, @max_queue=0, @fallback_policy=:abort, @auto_terminate=true, @pool=[], @ready=[], @queue=[], @scheduled_task_count=0, @completed_task_count=0, @largest_length=0, @ruby_pid=59753, @gc_interval=30, @next_gc_time=694963.258667, @StopEvent=#&amp;lt;Concurrent::Event:0x007f86b19e0bd0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0b80&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0b58&amp;gt;, @set=false, @iteration=0&amp;gt;, @StoppedEvent=#&amp;lt;Concurrent::Event:0x007f86b19e0ae0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0a90&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0a68&amp;gt;, @set=false, @iteration=0&amp;gt;&amp;gt;&amp;gt;, @__await_delegator__=#&amp;lt;Concurrent::Async::AwaitDelegator:0x007f86b19e0a18 @delegate=#&amp;lt;Concurrent::Async::AsyncDelegator:0x007f86b19e18a0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e1850&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e1828&amp;gt;, @delegate=#&amp;lt;Reporter:0x007f86b19e1940 ...&amp;gt;, @queue=[], @executor=#&amp;lt;Concurrent::ThreadPoolExecutor:0x007f86b19e0e78 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0d88&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0d60&amp;gt;, @min_length=8, @max_length=2147483647, @idletime=60, @max_queue=0, @fallback_policy=:abort, @auto_terminate=true, @pool=[], @ready=[], @queue=[], @scheduled_task_count=0, @completed_task_count=0, @largest_length=0, @ruby_pid=59753, @gc_interval=30, @next_gc_time=694963.258667, @StopEvent=#&amp;lt;Concurrent::Event:0x007f86b19e0bd0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0b80&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0b58&amp;gt;, @set=false, @iteration=0&amp;gt;, @StoppedEvent=#&amp;lt;Concurrent::Event:0x007f86b19e0ae0 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b19e0a90&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b19e0a68&amp;gt;, @set=false, @iteration=0&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;70108240336860&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And it’ll take a sec till you see output because of the sleep.&lt;/p&gt;

&lt;p&gt;Now lets try the same with async&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Concurrent::IVar:0x007f86b087dfc8 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b087df00&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b087deb0&amp;gt;, @event=#&amp;lt;Concurrent::Event:0x007f86b087dde8 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b087dca8&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b087dc80&amp;gt;, @set=false, @iteration=0&amp;gt;, @reason=nil, @value=nil, @observers=#&amp;lt;Concurrent::Collection::CopyOnWriteObserverSet:0x007f86b087db90 @__lock__=#&amp;lt;Thread::Mutex:0x007f86b087db18&amp;gt;, @__condition__=#&amp;lt;Thread::ConditionVariable:0x007f86b087daf0&amp;gt;, @observers={}&amp;gt;, @dup_on_deref=nil, @freeze_on_deref=nil, @copy_on_deref=nil, @do_nothing_on_deref=true, @state=:pending&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;70108232018840&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see the method returns immediately without printing any value, it just returns a promise like object that will hold the result of report method once done.
To prove you that report in non blocking try this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;70108231957940&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see the 1+1 returns before the reporters output&lt;/p&gt;

&lt;p&gt;Now lets try the await method&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;70339825139340&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70339824711620&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time code look like it run synchronously, but lets check the main thread id, as you can see the code run on
2 different threads but in sync. this is the actual power of await, sometimes we want to run something in a background thread,
and do something on another thread when done.&lt;/p&gt;

&lt;p&gt;The purpose of the Concurrent::Async is to allow a class methods to be called in a synchronized
way, meaning the class will always be thread safe  as long as you call it via async or await.
What actually happens in the backstage is whenever you use async/await the method invocation is inserted into a queue that got one worker thread that keep
this queue empty. because its just one thread that invoke the methods, it is safe for many threads to use the same object.&lt;/p&gt;

&lt;p&gt;Hope its clear enough,&lt;/p&gt;</content><author><name>Chen Kinnrot</name></author><category term="ruby" /><category term="async" /><category term="await" /><summary type="html">There is a lot of buzz about asyc await from the javascript world, the concept is very simple and make your code much more readable.</summary></entry><entry><title type="html">Octopress 101</title><link href="https://kinnrot.github.io/octopress101/" rel="alternate" type="text/html" title="Octopress 101" /><published>2017-07-25T22:45:07+03:00</published><updated>2017-07-25T22:45:07+03:00</updated><id>https://kinnrot.github.io/octopress101</id><content type="html" xml:base="https://kinnrot.github.io/octopress101/">&lt;p&gt;I decided to develop my own blog like all the other cool developers.
If you got here, this is what I got so far, it’s not too much, but it’s a start.&lt;/p&gt;

&lt;p&gt;When I develop something my rules are very simple&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid writing any code.&lt;/li&gt;
  &lt;li&gt;Keep it simple.&lt;/li&gt;
  &lt;li&gt;Easy to deploy on free hosting environment.&lt;/li&gt;
  &lt;li&gt;Decent code syntax highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I heard(mostly in www) people talking about jekyll as a static web site generator and began to dig dipper,
I searched a few ruby gems for blogging and found a gem called &lt;a href=&quot;https://github.com/octopress/octopress octopress v3&quot;&gt;octopress&lt;/a&gt;.
They, the guys who developed it, calls it Jekyll’s Ferrari, sounds good to me, looked pretty straight forward so I gave it a spin.&lt;/p&gt;

&lt;p&gt;First thing you need to do it to create a new project for your blog (just a new folder)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;my-blog&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next you should create a Gemfile for easy dependency management.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler
bundle init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now lets add octopress as a dependency, inside your Gemfile add&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'octopress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 3.0'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we should tell bundle to install gems from Gemfile, in terminal run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Everything is set up, now according to &lt;a href=&quot;https://github.com/octopress/octopress octopress&quot;&gt;octopress&lt;/a&gt; all we need to do
is to run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;octopress init &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we have a blog ready.&lt;/p&gt;

&lt;p&gt;Now you probably have a blog somewhere, mine is at &lt;a href=&quot;kinnrot.blogspot.com&quot;&gt;blogger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I thought to my self it would be nice to import all my posts to the new blog, well it’s super easy, jekyll has many importers
read more about it &lt;a href=&quot;https://import.jekyllrb.com/docs/home/ migrations&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after 3 clicks and one script I got all my old posts on my new blog.&lt;/p&gt;

&lt;p&gt;Whats next?
Well I need some theme, cause I can’t design at all, I just know how to design code, when it comes to colors layout and fonts, I suck.&lt;/p&gt;

&lt;p&gt;I googled a bit and found &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-themes&quot;&gt;that&lt;/a&gt; and chose to start simple
 with minima, which is minimal and simple to install and work with&lt;/p&gt;

&lt;p&gt;you just need to add it to your Gemfile&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minima'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;set the theme property in _config.yaml to minima and you are good to go, by running ‘jekyll build’ you’ll be able to see your blog
site generated in the _site filder.&lt;/p&gt;

&lt;p&gt;Now we just need to deploy it the easy way, this is where octopress helps.
I use github pages, which is very simple to set up, you just need to create a github repo named:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‘&lt;your user=&quot;&quot; name=&quot;&quot;&gt;.github.io'&lt;/your&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;then run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ocopress deploy init git &amp;lt;your full repo url&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;now make sure you are not on master branch and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production jekyll build
&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production octopress deploy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;thats it you got your blog on jekyll published on git hub.&lt;/p&gt;

&lt;h4 id=&quot;refereces&quot;&gt;Refereces&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt;Github pages&lt;/a&gt;&lt;/p&gt;</content><author><name>Chen Kinnrot</name></author><category term="jekyll" /><category term="octopress" /><category term="ruby" /><summary type="html">I decided to develop my own blog like all the other cool developers. If you got here, this is what I got so far, it’s not too much, but it’s a start.</summary></entry><entry><title type="html">Watch out for reference duplication instead of instance duplication</title><link href="https://kinnrot.github.io/watch-out-for-reference-duplication/" rel="alternate" type="text/html" title="Watch out for reference duplication instead of instance duplication" /><published>2017-07-18T14:42:00+03:00</published><updated>2017-07-18T14:42:00+03:00</updated><id>https://kinnrot.github.io/watch-out-for-reference-duplication</id><content type="html" xml:base="https://kinnrot.github.io/watch-out-for-reference-duplication/">&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: white;&quot;&gt;# This code will generate 96 instances&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: white;&quot;&gt;ViewStatData &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Struct&lt;/span&gt;.new(&lt;span style=&quot;color: #6d9cbe;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;background-color: #283b5e; color: #6d9cbe;&quot;&gt;total&lt;/span&gt;, &lt;span style=&quot;color: #6d9cbe;&quot;&gt;:target&lt;/span&gt;, &lt;span style=&quot;color: #6d9cbe;&quot;&gt;:ratio&lt;/span&gt;)&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #c7bab9; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;96&lt;/span&gt;.times.map {&lt;span style=&quot;color: #cc7833;&quot;&gt;|&lt;/span&gt;_&lt;span style=&quot;color: #cc7833;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;ViewStatData&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)}&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;# And this will not, it'll generate 96 pointers&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;[ViewStatData&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)] * 96&lt;/pre&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;# So Watch out!!!&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;</content><author><name>Chen Kinnrot</name></author><category term="Ruby" /><summary type="html"># This code will generate 96 instancesViewStatData = Struct.new(:total, :target, :ratio)96.times.map {|_|ViewStatData.new(0, 0, 0)}# And this will not, it'll generate 96 pointers[ViewStatData.new(0, 0, 0)] * 96# So Watch out!!!</summary></entry><entry><title type="html">Ruby Lazy chunked hash like behavior</title><link href="https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior/" rel="alternate" type="text/html" title="Ruby Lazy chunked hash like behavior" /><published>2017-06-05T15:11:00+03:00</published><updated>2017-06-05T15:11:00+03:00</updated><id>https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior</id><content type="html" xml:base="https://kinnrot.github.io/ruby-lazy-chunked-hash-like-behavior/">&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;When we want to iterate a long list, we can simply write a query and get a cursor, ActiveRecord will do all the heavy lifting for us.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;What happens when we need to do some complicated computations on a set of data, which sometimes can be too big to be stored in memory for the entire computing process?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;This is when we need to start being more creational.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I'd like to introduce what I came up with.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;The problem:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Complex calculation on time based data series for a period of 3 months.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Each calculation may depends on previous one and on future and past data.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- Must be in order.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;- When fetching all data server crash on memory.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;The solution:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I wanted to do the most minor code change possible, and currently the data was accessed via a hash.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;I decided to encapsulate the hash with something I called lazy chunked hash (tried google it see it as standard behavior in clojure).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;It looks like this:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;class &lt;/span&gt;&lt;span style=&quot;color: white;&quot;&gt;ValuesProvider&lt;/span&gt;&lt;span style=&quot;color: white;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;initialize&lt;/span&gt;()&lt;br /&gt;    &lt;span style=&quot;color: #d0d0ff;&quot;&gt;@loaded_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= nil&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;pre style=&quot;font-family: mononoki; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;background-color: #3c3c57; color: #d0d0ff;&quot;&gt;    @hash&lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Hash&lt;/span&gt;.new(&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;)&lt;/pre&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;[]&lt;/span&gt;(time_slot)     get(time_slot)   &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  private&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;  def &lt;/span&gt;&lt;span style=&quot;color: #ffc66d;&quot;&gt;get&lt;/span&gt;(time_slot)     &lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;= &lt;/span&gt;time_slot.to_date     &lt;span style=&quot;color: #cc7833;&quot;&gt;unless &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;== &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;@loaded_date&lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;      &lt;/span&gt;load(&lt;span style=&quot;color: #d0d0ff;&quot;&gt;relevant_date&lt;/span&gt;)     &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #d0d0ff;&quot;&gt;@hash&lt;/span&gt;[time_slot.to_i]   &lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #e6e1dc; font-family: 'mononoki'; font-size: 11.3pt;&quot;&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Pretty simple and does the work, instead of loading the data all at once, the data is being loaded for each day separately, this way we keep it chunky but not too chunky.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;And best part, my code that consume the data, didn't change because of the [] method, which makes my ValueProvider behave like an array.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;This solution is good when the consumer data request(call for[]) implies on what data should be loaded, which most of the times will, but in some cases it won't)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Chen Kinnrot</name></author><category term="Design" /><category term="memory leak" /><category term="Ruby" /><category term="Dynamic-languages" /><summary type="html">When we want to iterate a long list, we can simply write a query and get a cursor, ActiveRecord will do all the heavy lifting for us.What happens when we need to do some complicated computations on a set of data, which sometimes can be too big to be stored in memory for the entire computing process?This is when we need to start being more creational.I'd like to introduce what I came up with.The problem:- Complex calculation on time based data series for a period of 3 months.- Each calculation may depends on previous one and on future and past data.- Must be in order.- When fetching all data server crash on memory.The solution:I wanted to do the most minor code change possible, and currently the data was accessed via a hash.&amp;nbsp;I decided to encapsulate the hash with something I called lazy chunked hash (tried google it see it as standard behavior in clojure).It looks like this:class ValuesProvider def initialize() @loaded_date = nil @hash = Hash.new(0) end def [](time_slot) get(time_slot) end private def get(time_slot) relevant_date = time_slot.to_date unless relevant_date == @loaded_date load(relevant_date) end @hash[time_slot.to_i] endendPretty simple and does the work, instead of loading the data all at once, the data is being loaded for each day separately, this way we keep it chunky but not too chunky.And best part, my code that consume the data, didn't change because of the [] method, which makes my ValueProvider behave like an array.&amp;nbsp;&amp;nbsp;This solution is good when the consumer data request(call for[]) implies on what data should be loaded, which most of the times will, but in some cases it won't)</summary></entry><entry><title type="html">Rubymine on OSX memory issues</title><link href="https://kinnrot.github.io/rubymine-on-osx/" rel="alternate" type="text/html" title="Rubymine on OSX memory issues" /><published>2015-01-06T23:32:00+02:00</published><updated>2015-01-06T23:32:00+02:00</updated><id>https://kinnrot.github.io/rubymine-on-osx</id><content type="html" xml:base="https://kinnrot.github.io/rubymine-on-osx/">I found this only today, you should run Rubymine as 32 bit process.&lt;br /&gt;It works much faster and consume half the memory.&lt;br /&gt;&lt;br /&gt;To set this got to the Applicaitons folder right click on rubymine-&amp;gt;get info and check the &quot;open in 32 bit mode&quot;&lt;br /&gt;&lt;br /&gt;Thats all!&lt;br /&gt;&lt;br /&gt;</content><author><name>Chen Kinnrot</name></author><category term="OSX" /><category term="memory leak" /><category term="Ruby" /><category term="Rubymine" /><summary type="html">I found this only today, you should run Rubymine as 32 bit process.It works much faster and consume half the memory.To set this got to the Applicaitons folder right click on rubymine-&amp;gt;get info and check the &quot;open in 32 bit mode&quot;Thats all!</summary></entry><entry><title type="html">Use FactoryGirl And Faker for easy data generation in unit testing (Part1)</title><link href="https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data/" rel="alternate" type="text/html" title="Use FactoryGirl And Faker for easy data generation in unit testing (Part1)" /><published>2014-11-15T17:52:00+02:00</published><updated>2014-11-15T17:52:00+02:00</updated><id>https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data</id><content type="html" xml:base="https://kinnrot.github.io/use-factorygirl-and-faker-for-easy-data/">The &amp;nbsp;most irritating thing in writing tests is the data generation preparation process, sometimes you want to create an object with 20 fields that 10 of them are mandatory but you only care about the value of 1, and you don't want to mock, cause you interact with other methods and object that fetch this model from db.&lt;br /&gt;&lt;br /&gt;To me it happens a lot so I found the FactoryGirl + Faker combination that made my life much more easy and now I can write tests in peace.&lt;br /&gt;&lt;br /&gt;To add them just put in Gemfile:&lt;br /&gt;&lt;br /&gt;&amp;nbsp;gem &quot;factory_girl_rails&quot;, &quot;~&amp;gt; 4.0&quot;&lt;br /&gt;&amp;nbsp; gem &quot;faker&quot;&lt;br /&gt;&lt;br /&gt;So lets take a complex sample to explain all there is to know.&lt;br /&gt;&lt;br /&gt;We have a User, the User belongs to a Company, User has many tasks.&lt;br /&gt;&lt;br /&gt;Company has many irritating mandatory fields&lt;br /&gt;&lt;br /&gt;Lets define the Company Factory:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; border: 0.01mm solid rgb(0, 0, 0); font-size: 12pt; line-height: 100%;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.define &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;do&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;    factory &lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;:company&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;do&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;      name {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.name}&lt;br /&gt;      trp {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      grp {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      budget {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.number(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      cpm {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;70&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      trp_price {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;700&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;100000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      total_viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;200000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      unique_viewer {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;50000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;      spots {&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Faker&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;.between(&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;)}&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #e6e1dc;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #cc7833;&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;As you can see I define lots of fields with random values.&lt;br /&gt;&lt;br /&gt;Now we can create a company by writing&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;create(:company)&lt;/blockquote&gt;Or just build one (without save to db) by calling&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;build(:company)&amp;nbsp;&lt;/blockquote&gt;&lt;br /&gt;That's all for now, I'll continue in part2.&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp;&lt;/blockquote&gt;</content><author><name>Chen Kinnrot</name></author><summary type="html">The &amp;nbsp;most irritating thing in writing tests is the data generation preparation process, sometimes you want to create an object with 20 fields that 10 of them are mandatory but you only care about the value of 1, and you don't want to mock, cause you interact with other methods and object that fetch this model from db.To me it happens a lot so I found the FactoryGirl + Faker combination that made my life much more easy and now I can write tests in peace.To add them just put in Gemfile:&amp;nbsp;gem &quot;factory_girl_rails&quot;, &quot;~&amp;gt; 4.0&quot;&amp;nbsp; gem &quot;faker&quot;So lets take a complex sample to explain all there is to know.We have a User, the User belongs to a Company, User has many tasks.Company has many irritating mandatory fieldsLets define the Company Factory:FactoryGirl.define do factory :company do name {Faker::Name.name} trp {Faker::Number.between(0,10)} grp {Faker::Number.between(0,5)} budget {Faker::Number.number(4)} cpm {Faker::Number.between(1,70)} trp_price {Faker::Number.between(100,700)} viewer {Faker::Number.between(0,100000)} total_viewer {Faker::Number.between(0,200000)} unique_viewer {Faker::Number.between(0,50000)} spots {Faker::Number.between(0,1000)} end endAs you can see I define lots of fields with random values.Now we can create a company by writingcreate(:company)Or just build one (without save to db) by callingbuild(:company)&amp;nbsp;That's all for now, I'll continue in part2.&amp;nbsp;&amp;nbsp;</summary></entry></feed>